
bin/Debug/AVasion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000f6a  00000ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fuse         00000002  00820000  00820000  0000102c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         000012a8  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000daa  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003094  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000035b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00003a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 85 04 	call	0x90a	; 0x90a <main>
  7a:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#define RW PC1				/* Define Read/Write signal pin */
#define EN PC2				/* Define Enable signal pin */


void LCD_Command(unsigned char cmnd)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	af 97       	sbiw	r28, 0x2f	; 47
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	8f a7       	std	Y+47, r24	; 0x2f
	LCD_Data_Port= cmnd;
  98:	88 e3       	ldi	r24, 0x38	; 56
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2f a5       	ldd	r18, Y+47	; 0x2f
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	LCD_Command_Port &= ~(1<<RS);	/* RS=0 command reg. */
  a2:	85 e3       	ldi	r24, 0x35	; 53
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	25 e3       	ldi	r18, 0x35	; 53
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	2e 7f       	andi	r18, 0xFE	; 254
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
  b4:	85 e3       	ldi	r24, 0x35	; 53
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	25 e3       	ldi	r18, 0x35	; 53
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	2d 7f       	andi	r18, 0xFD	; 253
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	LCD_Command_Port |= (1<<EN);	/* Enable pulse */
  c6:	85 e3       	ldi	r24, 0x35	; 53
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	25 e3       	ldi	r18, 0x35	; 53
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	24 60       	ori	r18, 0x04	; 4
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	a0 e8       	ldi	r26, 0x80	; 128
  de:	bf e3       	ldi	r27, 0x3F	; 63
  e0:	89 83       	std	Y+1, r24	; 0x01
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	ab 83       	std	Y+3, r26	; 0x03
  e6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
  e8:	2b ea       	ldi	r18, 0xAB	; 171
  ea:	3a ea       	ldi	r19, 0xAA	; 170
  ec:	4a e2       	ldi	r20, 0x2A	; 42
  ee:	50 e4       	ldi	r21, 0x40	; 64
  f0:	69 81       	ldd	r22, Y+1	; 0x01
  f2:	7a 81       	ldd	r23, Y+2	; 0x02
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
  fc:	dc 01       	movw	r26, r24
  fe:	cb 01       	movw	r24, r22
 100:	8b 8b       	std	Y+19, r24	; 0x13
 102:	9c 8b       	std	Y+20, r25	; 0x14
 104:	ad 8b       	std	Y+21, r26	; 0x15
 106:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	ab 81       	ldd	r26, Y+3	; 0x03
 10e:	bc 81       	ldd	r27, Y+4	; 0x04
 110:	9c 01       	movw	r18, r24
 112:	ad 01       	movw	r20, r26
 114:	bc 01       	movw	r22, r24
 116:	cd 01       	movw	r24, r26
 118:	0e 94 ba 05 	call	0xb74	; 0xb74 <__addsf3>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	8f 8b       	std	Y+23, r24	; 0x17
 122:	98 8f       	std	Y+24, r25	; 0x18
 124:	a9 8f       	std	Y+25, r26	; 0x19
 126:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	5f e3       	ldi	r21, 0x3F	; 63
 130:	6b 89       	ldd	r22, Y+19	; 0x13
 132:	7c 89       	ldd	r23, Y+20	; 0x14
 134:	8d 89       	ldd	r24, Y+21	; 0x15
 136:	9e 89       	ldd	r25, Y+22	; 0x16
 138:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 13c:	88 23       	and	r24, r24
 13e:	1c f4       	brge	.+6      	; 0x146 <LCD_Command+0xc4>
		__ticks = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8b 8f       	std	Y+27, r24	; 0x1b
 144:	b2 c0       	rjmp	.+356    	; 0x2aa <LCD_Command+0x228>
	else if (__tmp2 > 65535)
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	3f ef       	ldi	r19, 0xFF	; 255
 14a:	4f e7       	ldi	r20, 0x7F	; 127
 14c:	57 e4       	ldi	r21, 0x47	; 71
 14e:	6f 89       	ldd	r22, Y+23	; 0x17
 150:	78 8d       	ldd	r23, Y+24	; 0x18
 152:	89 8d       	ldd	r24, Y+25	; 0x19
 154:	9a 8d       	ldd	r25, Y+26	; 0x1a
 156:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 15a:	18 16       	cp	r1, r24
 15c:	0c f0       	brlt	.+2      	; 0x160 <LCD_Command+0xde>
 15e:	7b c0       	rjmp	.+246    	; 0x256 <LCD_Command+0x1d4>
	{
		_delay_ms(__us / 1000.0);
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	4a e7       	ldi	r20, 0x7A	; 122
 166:	54 e4       	ldi	r21, 0x44	; 68
 168:	69 81       	ldd	r22, Y+1	; 0x01
 16a:	7a 81       	ldd	r23, Y+2	; 0x02
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	9c 81       	ldd	r25, Y+4	; 0x04
 170:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divsf3>
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	8c 8f       	std	Y+28, r24	; 0x1c
 17a:	9d 8f       	std	Y+29, r25	; 0x1d
 17c:	ae 8f       	std	Y+30, r26	; 0x1e
 17e:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	4a ef       	ldi	r20, 0xFA	; 250
 186:	54 e4       	ldi	r21, 0x44	; 68
 188:	6c 8d       	ldd	r22, Y+28	; 0x1c
 18a:	7d 8d       	ldd	r23, Y+29	; 0x1d
 18c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 18e:	9f 8d       	ldd	r25, Y+31	; 0x1f
 190:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	88 a3       	std	Y+32, r24	; 0x20
 19a:	99 a3       	std	Y+33, r25	; 0x21
 19c:	aa a3       	std	Y+34, r26	; 0x22
 19e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5f e3       	ldi	r21, 0x3F	; 63
 1a8:	68 a1       	ldd	r22, Y+32	; 0x20
 1aa:	79 a1       	ldd	r23, Y+33	; 0x21
 1ac:	8a a1       	ldd	r24, Y+34	; 0x22
 1ae:	9b a1       	ldd	r25, Y+35	; 0x23
 1b0:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 1b4:	88 23       	and	r24, r24
 1b6:	2c f4       	brge	.+10     	; 0x1c2 <LCD_Command+0x140>
		__ticks = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	9d a3       	std	Y+37, r25	; 0x25
 1be:	8c a3       	std	Y+36, r24	; 0x24
 1c0:	3f c0       	rjmp	.+126    	; 0x240 <LCD_Command+0x1be>
	else if (__tmp > 65535)
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	3f ef       	ldi	r19, 0xFF	; 255
 1c6:	4f e7       	ldi	r20, 0x7F	; 127
 1c8:	57 e4       	ldi	r21, 0x47	; 71
 1ca:	68 a1       	ldd	r22, Y+32	; 0x20
 1cc:	79 a1       	ldd	r23, Y+33	; 0x21
 1ce:	8a a1       	ldd	r24, Y+34	; 0x22
 1d0:	9b a1       	ldd	r25, Y+35	; 0x23
 1d2:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 1d6:	18 16       	cp	r1, r24
 1d8:	4c f5       	brge	.+82     	; 0x22c <LCD_Command+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e2       	ldi	r20, 0x20	; 32
 1e0:	51 e4       	ldi	r21, 0x41	; 65
 1e2:	6c 8d       	ldd	r22, Y+28	; 0x1c
 1e4:	7d 8d       	ldd	r23, Y+29	; 0x1d
 1e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
 1e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
 1ea:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 1ee:	dc 01       	movw	r26, r24
 1f0:	cb 01       	movw	r24, r22
 1f2:	bc 01       	movw	r22, r24
 1f4:	cd 01       	movw	r24, r26
 1f6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 1fa:	dc 01       	movw	r26, r24
 1fc:	cb 01       	movw	r24, r22
 1fe:	9d a3       	std	Y+37, r25	; 0x25
 200:	8c a3       	std	Y+36, r24	; 0x24
 202:	0f c0       	rjmp	.+30     	; 0x222 <LCD_Command+0x1a0>
 204:	88 ec       	ldi	r24, 0xC8	; 200
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	9f a3       	std	Y+39, r25	; 0x27
 20a:	8e a3       	std	Y+38, r24	; 0x26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20c:	8e a1       	ldd	r24, Y+38	; 0x26
 20e:	9f a1       	ldd	r25, Y+39	; 0x27
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_Command+0x18e>
 214:	9f a3       	std	Y+39, r25	; 0x27
 216:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 218:	8c a1       	ldd	r24, Y+36	; 0x24
 21a:	9d a1       	ldd	r25, Y+37	; 0x25
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	9d a3       	std	Y+37, r25	; 0x25
 220:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 222:	8c a1       	ldd	r24, Y+36	; 0x24
 224:	9d a1       	ldd	r25, Y+37	; 0x25
 226:	89 2b       	or	r24, r25
 228:	69 f7       	brne	.-38     	; 0x204 <LCD_Command+0x182>
 22a:	3f c0       	rjmp	.+126    	; 0x2aa <LCD_Command+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 22c:	68 a1       	ldd	r22, Y+32	; 0x20
 22e:	79 a1       	ldd	r23, Y+33	; 0x21
 230:	8a a1       	ldd	r24, Y+34	; 0x22
 232:	9b a1       	ldd	r25, Y+35	; 0x23
 234:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 238:	dc 01       	movw	r26, r24
 23a:	cb 01       	movw	r24, r22
 23c:	9d a3       	std	Y+37, r25	; 0x25
 23e:	8c a3       	std	Y+36, r24	; 0x24
 240:	8c a1       	ldd	r24, Y+36	; 0x24
 242:	9d a1       	ldd	r25, Y+37	; 0x25
 244:	99 a7       	std	Y+41, r25	; 0x29
 246:	88 a7       	std	Y+40, r24	; 0x28
 248:	88 a5       	ldd	r24, Y+40	; 0x28
 24a:	99 a5       	ldd	r25, Y+41	; 0x29
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_Command+0x1ca>
 250:	99 a7       	std	Y+41, r25	; 0x29
 252:	88 a7       	std	Y+40, r24	; 0x28
 254:	2a c0       	rjmp	.+84     	; 0x2aa <LCD_Command+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	4f e7       	ldi	r20, 0x7F	; 127
 25c:	53 e4       	ldi	r21, 0x43	; 67
 25e:	6b 89       	ldd	r22, Y+19	; 0x13
 260:	7c 89       	ldd	r23, Y+20	; 0x14
 262:	8d 89       	ldd	r24, Y+21	; 0x15
 264:	9e 89       	ldd	r25, Y+22	; 0x16
 266:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 26a:	18 16       	cp	r1, r24
 26c:	ac f4       	brge	.+42     	; 0x298 <LCD_Command+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 26e:	6f 89       	ldd	r22, Y+23	; 0x17
 270:	78 8d       	ldd	r23, Y+24	; 0x18
 272:	89 8d       	ldd	r24, Y+25	; 0x19
 274:	9a 8d       	ldd	r25, Y+26	; 0x1a
 276:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	9b a7       	std	Y+43, r25	; 0x2b
 280:	8a a7       	std	Y+42, r24	; 0x2a
 282:	8a a5       	ldd	r24, Y+42	; 0x2a
 284:	9b a5       	ldd	r25, Y+43	; 0x2b
 286:	9d a7       	std	Y+45, r25	; 0x2d
 288:	8c a7       	std	Y+44, r24	; 0x2c
 28a:	8c a5       	ldd	r24, Y+44	; 0x2c
 28c:	9d a5       	ldd	r25, Y+45	; 0x2d
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_Command+0x20c>
 292:	9d a7       	std	Y+45, r25	; 0x2d
 294:	8c a7       	std	Y+44, r24	; 0x2c
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <LCD_Command+0x234>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 298:	6b 89       	ldd	r22, Y+19	; 0x13
 29a:	7c 89       	ldd	r23, Y+20	; 0x14
 29c:	8d 89       	ldd	r24, Y+21	; 0x15
 29e:	9e 89       	ldd	r25, Y+22	; 0x16
 2a0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	8b 8f       	std	Y+27, r24	; 0x1b
 2aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2ac:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ae:	8e a5       	ldd	r24, Y+46	; 0x2e
 2b0:	8a 95       	dec	r24
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Command+0x22e>
 2b4:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 2b6:	85 e3       	ldi	r24, 0x35	; 53
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	25 e3       	ldi	r18, 0x35	; 53
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	f9 01       	movw	r30, r18
 2c0:	20 81       	ld	r18, Z
 2c2:	2b 7f       	andi	r18, 0xFB	; 251
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	a0 e4       	ldi	r26, 0x40	; 64
 2ce:	b0 e4       	ldi	r27, 0x40	; 64
 2d0:	8d 83       	std	Y+5, r24	; 0x05
 2d2:	9e 83       	std	Y+6, r25	; 0x06
 2d4:	af 83       	std	Y+7, r26	; 0x07
 2d6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	4a ef       	ldi	r20, 0xFA	; 250
 2de:	54 e4       	ldi	r21, 0x44	; 68
 2e0:	6d 81       	ldd	r22, Y+5	; 0x05
 2e2:	7e 81       	ldd	r23, Y+6	; 0x06
 2e4:	8f 81       	ldd	r24, Y+7	; 0x07
 2e6:	98 85       	ldd	r25, Y+8	; 0x08
 2e8:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 2ec:	dc 01       	movw	r26, r24
 2ee:	cb 01       	movw	r24, r22
 2f0:	89 87       	std	Y+9, r24	; 0x09
 2f2:	9a 87       	std	Y+10, r25	; 0x0a
 2f4:	ab 87       	std	Y+11, r26	; 0x0b
 2f6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e8       	ldi	r20, 0x80	; 128
 2fe:	5f e3       	ldi	r21, 0x3F	; 63
 300:	69 85       	ldd	r22, Y+9	; 0x09
 302:	7a 85       	ldd	r23, Y+10	; 0x0a
 304:	8b 85       	ldd	r24, Y+11	; 0x0b
 306:	9c 85       	ldd	r25, Y+12	; 0x0c
 308:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 30c:	88 23       	and	r24, r24
 30e:	2c f4       	brge	.+10     	; 0x31a <LCD_Command+0x298>
		__ticks = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9e 87       	std	Y+14, r25	; 0x0e
 316:	8d 87       	std	Y+13, r24	; 0x0d
 318:	3f c0       	rjmp	.+126    	; 0x398 <LCD_Command+0x316>
	else if (__tmp > 65535)
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	3f ef       	ldi	r19, 0xFF	; 255
 31e:	4f e7       	ldi	r20, 0x7F	; 127
 320:	57 e4       	ldi	r21, 0x47	; 71
 322:	69 85       	ldd	r22, Y+9	; 0x09
 324:	7a 85       	ldd	r23, Y+10	; 0x0a
 326:	8b 85       	ldd	r24, Y+11	; 0x0b
 328:	9c 85       	ldd	r25, Y+12	; 0x0c
 32a:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 32e:	18 16       	cp	r1, r24
 330:	4c f5       	brge	.+82     	; 0x384 <LCD_Command+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e2       	ldi	r20, 0x20	; 32
 338:	51 e4       	ldi	r21, 0x41	; 65
 33a:	6d 81       	ldd	r22, Y+5	; 0x05
 33c:	7e 81       	ldd	r23, Y+6	; 0x06
 33e:	8f 81       	ldd	r24, Y+7	; 0x07
 340:	98 85       	ldd	r25, Y+8	; 0x08
 342:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 346:	dc 01       	movw	r26, r24
 348:	cb 01       	movw	r24, r22
 34a:	bc 01       	movw	r22, r24
 34c:	cd 01       	movw	r24, r26
 34e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 352:	dc 01       	movw	r26, r24
 354:	cb 01       	movw	r24, r22
 356:	9e 87       	std	Y+14, r25	; 0x0e
 358:	8d 87       	std	Y+13, r24	; 0x0d
 35a:	0f c0       	rjmp	.+30     	; 0x37a <LCD_Command+0x2f8>
 35c:	88 ec       	ldi	r24, 0xC8	; 200
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	98 8b       	std	Y+16, r25	; 0x10
 362:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 364:	8f 85       	ldd	r24, Y+15	; 0x0f
 366:	98 89       	ldd	r25, Y+16	; 0x10
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_Command+0x2e6>
 36c:	98 8b       	std	Y+16, r25	; 0x10
 36e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 370:	8d 85       	ldd	r24, Y+13	; 0x0d
 372:	9e 85       	ldd	r25, Y+14	; 0x0e
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	9e 87       	std	Y+14, r25	; 0x0e
 378:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 37a:	8d 85       	ldd	r24, Y+13	; 0x0d
 37c:	9e 85       	ldd	r25, Y+14	; 0x0e
 37e:	89 2b       	or	r24, r25
 380:	69 f7       	brne	.-38     	; 0x35c <LCD_Command+0x2da>
	_delay_ms(3);
}
 382:	14 c0       	rjmp	.+40     	; 0x3ac <LCD_Command+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 384:	69 85       	ldd	r22, Y+9	; 0x09
 386:	7a 85       	ldd	r23, Y+10	; 0x0a
 388:	8b 85       	ldd	r24, Y+11	; 0x0b
 38a:	9c 85       	ldd	r25, Y+12	; 0x0c
 38c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 390:	dc 01       	movw	r26, r24
 392:	cb 01       	movw	r24, r22
 394:	9e 87       	std	Y+14, r25	; 0x0e
 396:	8d 87       	std	Y+13, r24	; 0x0d
 398:	8d 85       	ldd	r24, Y+13	; 0x0d
 39a:	9e 85       	ldd	r25, Y+14	; 0x0e
 39c:	9a 8b       	std	Y+18, r25	; 0x12
 39e:	89 8b       	std	Y+17, r24	; 0x11
 3a0:	89 89       	ldd	r24, Y+17	; 0x11
 3a2:	9a 89       	ldd	r25, Y+18	; 0x12
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_Command+0x322>
 3a8:	9a 8b       	std	Y+18, r25	; 0x12
 3aa:	89 8b       	std	Y+17, r24	; 0x11
 3ac:	00 00       	nop
 3ae:	af 96       	adiw	r28, 0x2f	; 47
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <LCD_Char>:

void LCD_Char (unsigned char char_data)	/* LCD data write function */
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	af 97       	sbiw	r28, 0x2f	; 47
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	8f a7       	std	Y+47, r24	; 0x2f
	LCD_Data_Port= char_data;
 3d6:	88 e3       	ldi	r24, 0x38	; 56
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	2f a5       	ldd	r18, Y+47	; 0x2f
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
 3e0:	85 e3       	ldi	r24, 0x35	; 53
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	25 e3       	ldi	r18, 0x35	; 53
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	f9 01       	movw	r30, r18
 3ea:	20 81       	ld	r18, Z
 3ec:	21 60       	ori	r18, 0x01	; 1
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 write operation */
 3f2:	85 e3       	ldi	r24, 0x35	; 53
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	25 e3       	ldi	r18, 0x35	; 53
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	f9 01       	movw	r30, r18
 3fc:	20 81       	ld	r18, Z
 3fe:	2d 7f       	andi	r18, 0xFD	; 253
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	25 e3       	ldi	r18, 0x35	; 53
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	24 60       	ori	r18, 0x04	; 4
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	a0 e8       	ldi	r26, 0x80	; 128
 41c:	bf e3       	ldi	r27, 0x3F	; 63
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	9a 83       	std	Y+2, r25	; 0x02
 422:	ab 83       	std	Y+3, r26	; 0x03
 424:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 426:	2b ea       	ldi	r18, 0xAB	; 171
 428:	3a ea       	ldi	r19, 0xAA	; 170
 42a:	4a e2       	ldi	r20, 0x2A	; 42
 42c:	50 e4       	ldi	r21, 0x40	; 64
 42e:	69 81       	ldd	r22, Y+1	; 0x01
 430:	7a 81       	ldd	r23, Y+2	; 0x02
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	9c 81       	ldd	r25, Y+4	; 0x04
 436:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 43a:	dc 01       	movw	r26, r24
 43c:	cb 01       	movw	r24, r22
 43e:	8b 8b       	std	Y+19, r24	; 0x13
 440:	9c 8b       	std	Y+20, r25	; 0x14
 442:	ad 8b       	std	Y+21, r26	; 0x15
 444:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	9a 81       	ldd	r25, Y+2	; 0x02
 44a:	ab 81       	ldd	r26, Y+3	; 0x03
 44c:	bc 81       	ldd	r27, Y+4	; 0x04
 44e:	9c 01       	movw	r18, r24
 450:	ad 01       	movw	r20, r26
 452:	bc 01       	movw	r22, r24
 454:	cd 01       	movw	r24, r26
 456:	0e 94 ba 05 	call	0xb74	; 0xb74 <__addsf3>
 45a:	dc 01       	movw	r26, r24
 45c:	cb 01       	movw	r24, r22
 45e:	8f 8b       	std	Y+23, r24	; 0x17
 460:	98 8f       	std	Y+24, r25	; 0x18
 462:	a9 8f       	std	Y+25, r26	; 0x19
 464:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e8       	ldi	r20, 0x80	; 128
 46c:	5f e3       	ldi	r21, 0x3F	; 63
 46e:	6b 89       	ldd	r22, Y+19	; 0x13
 470:	7c 89       	ldd	r23, Y+20	; 0x14
 472:	8d 89       	ldd	r24, Y+21	; 0x15
 474:	9e 89       	ldd	r25, Y+22	; 0x16
 476:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 47a:	88 23       	and	r24, r24
 47c:	1c f4       	brge	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		__ticks = 1;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	8b 8f       	std	Y+27, r24	; 0x1b
 482:	b2 c0       	rjmp	.+356    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
	else if (__tmp2 > 65535)
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	3f ef       	ldi	r19, 0xFF	; 255
 488:	4f e7       	ldi	r20, 0x7F	; 127
 48a:	57 e4       	ldi	r21, 0x47	; 71
 48c:	6f 89       	ldd	r22, Y+23	; 0x17
 48e:	78 8d       	ldd	r23, Y+24	; 0x18
 490:	89 8d       	ldd	r24, Y+25	; 0x19
 492:	9a 8d       	ldd	r25, Y+26	; 0x1a
 494:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 498:	18 16       	cp	r1, r24
 49a:	0c f0       	brlt	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	7b c0       	rjmp	.+246    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
	{
		_delay_ms(__us / 1000.0);
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	4a e7       	ldi	r20, 0x7A	; 122
 4a4:	54 e4       	ldi	r21, 0x44	; 68
 4a6:	69 81       	ldd	r22, Y+1	; 0x01
 4a8:	7a 81       	ldd	r23, Y+2	; 0x02
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divsf3>
 4b2:	dc 01       	movw	r26, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	8c 8f       	std	Y+28, r24	; 0x1c
 4b8:	9d 8f       	std	Y+29, r25	; 0x1d
 4ba:	ae 8f       	std	Y+30, r26	; 0x1e
 4bc:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	4a ef       	ldi	r20, 0xFA	; 250
 4c4:	54 e4       	ldi	r21, 0x44	; 68
 4c6:	6c 8d       	ldd	r22, Y+28	; 0x1c
 4c8:	7d 8d       	ldd	r23, Y+29	; 0x1d
 4ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
 4cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
 4ce:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 4d2:	dc 01       	movw	r26, r24
 4d4:	cb 01       	movw	r24, r22
 4d6:	88 a3       	std	Y+32, r24	; 0x20
 4d8:	99 a3       	std	Y+33, r25	; 0x21
 4da:	aa a3       	std	Y+34, r26	; 0x22
 4dc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	40 e8       	ldi	r20, 0x80	; 128
 4e4:	5f e3       	ldi	r21, 0x3F	; 63
 4e6:	68 a1       	ldd	r22, Y+32	; 0x20
 4e8:	79 a1       	ldd	r23, Y+33	; 0x21
 4ea:	8a a1       	ldd	r24, Y+34	; 0x22
 4ec:	9b a1       	ldd	r25, Y+35	; 0x23
 4ee:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 4f2:	88 23       	and	r24, r24
 4f4:	2c f4       	brge	.+10     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		__ticks = 1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9d a3       	std	Y+37, r25	; 0x25
 4fc:	8c a3       	std	Y+36, r24	; 0x24
 4fe:	3f c0       	rjmp	.+126    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
	else if (__tmp > 65535)
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	3f ef       	ldi	r19, 0xFF	; 255
 504:	4f e7       	ldi	r20, 0x7F	; 127
 506:	57 e4       	ldi	r21, 0x47	; 71
 508:	68 a1       	ldd	r22, Y+32	; 0x20
 50a:	79 a1       	ldd	r23, Y+33	; 0x21
 50c:	8a a1       	ldd	r24, Y+34	; 0x22
 50e:	9b a1       	ldd	r25, Y+35	; 0x23
 510:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 514:	18 16       	cp	r1, r24
 516:	4c f5       	brge	.+82     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e2       	ldi	r20, 0x20	; 32
 51e:	51 e4       	ldi	r21, 0x41	; 65
 520:	6c 8d       	ldd	r22, Y+28	; 0x1c
 522:	7d 8d       	ldd	r23, Y+29	; 0x1d
 524:	8e 8d       	ldd	r24, Y+30	; 0x1e
 526:	9f 8d       	ldd	r25, Y+31	; 0x1f
 528:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 52c:	dc 01       	movw	r26, r24
 52e:	cb 01       	movw	r24, r22
 530:	bc 01       	movw	r22, r24
 532:	cd 01       	movw	r24, r26
 534:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 538:	dc 01       	movw	r26, r24
 53a:	cb 01       	movw	r24, r22
 53c:	9d a3       	std	Y+37, r25	; 0x25
 53e:	8c a3       	std	Y+36, r24	; 0x24
 540:	0f c0       	rjmp	.+30     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 542:	88 ec       	ldi	r24, 0xC8	; 200
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	9f a3       	std	Y+39, r25	; 0x27
 548:	8e a3       	std	Y+38, r24	; 0x26
 54a:	8e a1       	ldd	r24, Y+38	; 0x26
 54c:	9f a1       	ldd	r25, Y+39	; 0x27
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 552:	9f a3       	std	Y+39, r25	; 0x27
 554:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 556:	8c a1       	ldd	r24, Y+36	; 0x24
 558:	9d a1       	ldd	r25, Y+37	; 0x25
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	9d a3       	std	Y+37, r25	; 0x25
 55e:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 560:	8c a1       	ldd	r24, Y+36	; 0x24
 562:	9d a1       	ldd	r25, Y+37	; 0x25
 564:	89 2b       	or	r24, r25
 566:	69 f7       	brne	.-38     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 568:	3f c0       	rjmp	.+126    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 56a:	68 a1       	ldd	r22, Y+32	; 0x20
 56c:	79 a1       	ldd	r23, Y+33	; 0x21
 56e:	8a a1       	ldd	r24, Y+34	; 0x22
 570:	9b a1       	ldd	r25, Y+35	; 0x23
 572:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 576:	dc 01       	movw	r26, r24
 578:	cb 01       	movw	r24, r22
 57a:	9d a3       	std	Y+37, r25	; 0x25
 57c:	8c a3       	std	Y+36, r24	; 0x24
 57e:	8c a1       	ldd	r24, Y+36	; 0x24
 580:	9d a1       	ldd	r25, Y+37	; 0x25
 582:	99 a7       	std	Y+41, r25	; 0x29
 584:	88 a7       	std	Y+40, r24	; 0x28
 586:	88 a5       	ldd	r24, Y+40	; 0x28
 588:	99 a5       	ldd	r25, Y+41	; 0x29
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 58e:	99 a7       	std	Y+41, r25	; 0x29
 590:	88 a7       	std	Y+40, r24	; 0x28
 592:	2a c0       	rjmp	.+84     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	4f e7       	ldi	r20, 0x7F	; 127
 59a:	53 e4       	ldi	r21, 0x43	; 67
 59c:	6b 89       	ldd	r22, Y+19	; 0x13
 59e:	7c 89       	ldd	r23, Y+20	; 0x14
 5a0:	8d 89       	ldd	r24, Y+21	; 0x15
 5a2:	9e 89       	ldd	r25, Y+22	; 0x16
 5a4:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 5a8:	18 16       	cp	r1, r24
 5aa:	ac f4       	brge	.+42     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 5ac:	6f 89       	ldd	r22, Y+23	; 0x17
 5ae:	78 8d       	ldd	r23, Y+24	; 0x18
 5b0:	89 8d       	ldd	r24, Y+25	; 0x19
 5b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 5b4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 5b8:	dc 01       	movw	r26, r24
 5ba:	cb 01       	movw	r24, r22
 5bc:	9b a7       	std	Y+43, r25	; 0x2b
 5be:	8a a7       	std	Y+42, r24	; 0x2a
 5c0:	8a a5       	ldd	r24, Y+42	; 0x2a
 5c2:	9b a5       	ldd	r25, Y+43	; 0x2b
 5c4:	9d a7       	std	Y+45, r25	; 0x2d
 5c6:	8c a7       	std	Y+44, r24	; 0x2c
 5c8:	8c a5       	ldd	r24, Y+44	; 0x2c
 5ca:	9d a5       	ldd	r25, Y+45	; 0x2d
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d0:	9d a7       	std	Y+45, r25	; 0x2d
 5d2:	8c a7       	std	Y+44, r24	; 0x2c
 5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 5d6:	6b 89       	ldd	r22, Y+19	; 0x13
 5d8:	7c 89       	ldd	r23, Y+20	; 0x14
 5da:	8d 89       	ldd	r24, Y+21	; 0x15
 5dc:	9e 89       	ldd	r25, Y+22	; 0x16
 5de:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 5e2:	dc 01       	movw	r26, r24
 5e4:	cb 01       	movw	r24, r22
 5e6:	8b 8f       	std	Y+27, r24	; 0x1b
 5e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5ea:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5ec:	8e a5       	ldd	r24, Y+46	; 0x2e
 5ee:	8a 95       	dec	r24
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5f2:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 5f4:	85 e3       	ldi	r24, 0x35	; 53
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	25 e3       	ldi	r18, 0x35	; 53
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	f9 01       	movw	r30, r18
 5fe:	20 81       	ld	r18, Z
 600:	2b 7f       	andi	r18, 0xFB	; 251
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a0 e8       	ldi	r26, 0x80	; 128
 60c:	bf e3       	ldi	r27, 0x3F	; 63
 60e:	8d 83       	std	Y+5, r24	; 0x05
 610:	9e 83       	std	Y+6, r25	; 0x06
 612:	af 83       	std	Y+7, r26	; 0x07
 614:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	4a ef       	ldi	r20, 0xFA	; 250
 61c:	54 e4       	ldi	r21, 0x44	; 68
 61e:	6d 81       	ldd	r22, Y+5	; 0x05
 620:	7e 81       	ldd	r23, Y+6	; 0x06
 622:	8f 81       	ldd	r24, Y+7	; 0x07
 624:	98 85       	ldd	r25, Y+8	; 0x08
 626:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 62a:	dc 01       	movw	r26, r24
 62c:	cb 01       	movw	r24, r22
 62e:	89 87       	std	Y+9, r24	; 0x09
 630:	9a 87       	std	Y+10, r25	; 0x0a
 632:	ab 87       	std	Y+11, r26	; 0x0b
 634:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e8       	ldi	r20, 0x80	; 128
 63c:	5f e3       	ldi	r21, 0x3F	; 63
 63e:	69 85       	ldd	r22, Y+9	; 0x09
 640:	7a 85       	ldd	r23, Y+10	; 0x0a
 642:	8b 85       	ldd	r24, Y+11	; 0x0b
 644:	9c 85       	ldd	r25, Y+12	; 0x0c
 646:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 64a:	88 23       	and	r24, r24
 64c:	2c f4       	brge	.+10     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
		__ticks = 1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	9e 87       	std	Y+14, r25	; 0x0e
 654:	8d 87       	std	Y+13, r24	; 0x0d
 656:	3f c0       	rjmp	.+126    	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
	else if (__tmp > 65535)
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	3f ef       	ldi	r19, 0xFF	; 255
 65c:	4f e7       	ldi	r20, 0x7F	; 127
 65e:	57 e4       	ldi	r21, 0x47	; 71
 660:	69 85       	ldd	r22, Y+9	; 0x09
 662:	7a 85       	ldd	r23, Y+10	; 0x0a
 664:	8b 85       	ldd	r24, Y+11	; 0x0b
 666:	9c 85       	ldd	r25, Y+12	; 0x0c
 668:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 66c:	18 16       	cp	r1, r24
 66e:	4c f5       	brge	.+82     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	40 e2       	ldi	r20, 0x20	; 32
 676:	51 e4       	ldi	r21, 0x41	; 65
 678:	6d 81       	ldd	r22, Y+5	; 0x05
 67a:	7e 81       	ldd	r23, Y+6	; 0x06
 67c:	8f 81       	ldd	r24, Y+7	; 0x07
 67e:	98 85       	ldd	r25, Y+8	; 0x08
 680:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 684:	dc 01       	movw	r26, r24
 686:	cb 01       	movw	r24, r22
 688:	bc 01       	movw	r22, r24
 68a:	cd 01       	movw	r24, r26
 68c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 690:	dc 01       	movw	r26, r24
 692:	cb 01       	movw	r24, r22
 694:	9e 87       	std	Y+14, r25	; 0x0e
 696:	8d 87       	std	Y+13, r24	; 0x0d
 698:	0f c0       	rjmp	.+30     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 69a:	88 ec       	ldi	r24, 0xC8	; 200
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	98 8b       	std	Y+16, r25	; 0x10
 6a0:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6a2:	8f 85       	ldd	r24, Y+15	; 0x0f
 6a4:	98 89       	ldd	r25, Y+16	; 0x10
 6a6:	01 97       	sbiw	r24, 0x01	; 1
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 6aa:	98 8b       	std	Y+16, r25	; 0x10
 6ac:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 6b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	9e 87       	std	Y+14, r25	; 0x0e
 6b6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 6ba:	9e 85       	ldd	r25, Y+14	; 0x0e
 6bc:	89 2b       	or	r24, r25
 6be:	69 f7       	brne	.-38     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
	_delay_ms(1);
}
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6c2:	69 85       	ldd	r22, Y+9	; 0x09
 6c4:	7a 85       	ldd	r23, Y+10	; 0x0a
 6c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 6c8:	9c 85       	ldd	r25, Y+12	; 0x0c
 6ca:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 6ce:	dc 01       	movw	r26, r24
 6d0:	cb 01       	movw	r24, r22
 6d2:	9e 87       	std	Y+14, r25	; 0x0e
 6d4:	8d 87       	std	Y+13, r24	; 0x0d
 6d6:	8d 85       	ldd	r24, Y+13	; 0x0d
 6d8:	9e 85       	ldd	r25, Y+14	; 0x0e
 6da:	9a 8b       	std	Y+18, r25	; 0x12
 6dc:	89 8b       	std	Y+17, r24	; 0x11
 6de:	89 89       	ldd	r24, Y+17	; 0x11
 6e0:	9a 89       	ldd	r25, Y+18	; 0x12
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6e6:	9a 8b       	std	Y+18, r25	; 0x12
 6e8:	89 8b       	std	Y+17, r24	; 0x11
 6ea:	00 00       	nop
 6ec:	af 96       	adiw	r28, 0x2f	; 47
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	2e 97       	sbiw	r28, 0x0e	; 14
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
 712:	84 e3       	ldi	r24, 0x34	; 52
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	fc 01       	movw	r30, r24
 71a:	20 83       	st	Z, r18
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
 71c:	87 e3       	ldi	r24, 0x37	; 55
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	a0 ea       	ldi	r26, 0xA0	; 160
 72c:	b1 e4       	ldi	r27, 0x41	; 65
 72e:	89 83       	std	Y+1, r24	; 0x01
 730:	9a 83       	std	Y+2, r25	; 0x02
 732:	ab 83       	std	Y+3, r26	; 0x03
 734:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 736:	20 e0       	ldi	r18, 0x00	; 0
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	4a ef       	ldi	r20, 0xFA	; 250
 73c:	54 e4       	ldi	r21, 0x44	; 68
 73e:	69 81       	ldd	r22, Y+1	; 0x01
 740:	7a 81       	ldd	r23, Y+2	; 0x02
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	9c 81       	ldd	r25, Y+4	; 0x04
 746:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 74a:	dc 01       	movw	r26, r24
 74c:	cb 01       	movw	r24, r22
 74e:	8d 83       	std	Y+5, r24	; 0x05
 750:	9e 83       	std	Y+6, r25	; 0x06
 752:	af 83       	std	Y+7, r26	; 0x07
 754:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 756:	20 e0       	ldi	r18, 0x00	; 0
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	40 e8       	ldi	r20, 0x80	; 128
 75c:	5f e3       	ldi	r21, 0x3F	; 63
 75e:	6d 81       	ldd	r22, Y+5	; 0x05
 760:	7e 81       	ldd	r23, Y+6	; 0x06
 762:	8f 81       	ldd	r24, Y+7	; 0x07
 764:	98 85       	ldd	r25, Y+8	; 0x08
 766:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 76a:	88 23       	and	r24, r24
 76c:	2c f4       	brge	.+10     	; 0x778 <LCD_Init+0x7a>
		__ticks = 1;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	9a 87       	std	Y+10, r25	; 0x0a
 774:	89 87       	std	Y+9, r24	; 0x09
 776:	3f c0       	rjmp	.+126    	; 0x7f6 <LCD_Init+0xf8>
	else if (__tmp > 65535)
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	3f ef       	ldi	r19, 0xFF	; 255
 77c:	4f e7       	ldi	r20, 0x7F	; 127
 77e:	57 e4       	ldi	r21, 0x47	; 71
 780:	6d 81       	ldd	r22, Y+5	; 0x05
 782:	7e 81       	ldd	r23, Y+6	; 0x06
 784:	8f 81       	ldd	r24, Y+7	; 0x07
 786:	98 85       	ldd	r25, Y+8	; 0x08
 788:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 78c:	18 16       	cp	r1, r24
 78e:	4c f5       	brge	.+82     	; 0x7e2 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 e2       	ldi	r20, 0x20	; 32
 796:	51 e4       	ldi	r21, 0x41	; 65
 798:	69 81       	ldd	r22, Y+1	; 0x01
 79a:	7a 81       	ldd	r23, Y+2	; 0x02
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	9c 81       	ldd	r25, Y+4	; 0x04
 7a0:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 7a4:	dc 01       	movw	r26, r24
 7a6:	cb 01       	movw	r24, r22
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 7b0:	dc 01       	movw	r26, r24
 7b2:	cb 01       	movw	r24, r22
 7b4:	9a 87       	std	Y+10, r25	; 0x0a
 7b6:	89 87       	std	Y+9, r24	; 0x09
 7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <LCD_Init+0xda>
 7ba:	88 ec       	ldi	r24, 0xC8	; 200
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	9c 87       	std	Y+12, r25	; 0x0c
 7c0:	8b 87       	std	Y+11, r24	; 0x0b
 7c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 7c4:	9c 85       	ldd	r25, Y+12	; 0x0c
 7c6:	01 97       	sbiw	r24, 0x01	; 1
 7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCD_Init+0xc8>
 7ca:	9c 87       	std	Y+12, r25	; 0x0c
 7cc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7ce:	89 85       	ldd	r24, Y+9	; 0x09
 7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	9a 87       	std	Y+10, r25	; 0x0a
 7d6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7d8:	89 85       	ldd	r24, Y+9	; 0x09
 7da:	9a 85       	ldd	r25, Y+10	; 0x0a
 7dc:	89 2b       	or	r24, r25
 7de:	69 f7       	brne	.-38     	; 0x7ba <LCD_Init+0xbc>
 7e0:	14 c0       	rjmp	.+40     	; 0x80a <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7e2:	6d 81       	ldd	r22, Y+5	; 0x05
 7e4:	7e 81       	ldd	r23, Y+6	; 0x06
 7e6:	8f 81       	ldd	r24, Y+7	; 0x07
 7e8:	98 85       	ldd	r25, Y+8	; 0x08
 7ea:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 7ee:	dc 01       	movw	r26, r24
 7f0:	cb 01       	movw	r24, r22
 7f2:	9a 87       	std	Y+10, r25	; 0x0a
 7f4:	89 87       	std	Y+9, r24	; 0x09
 7f6:	89 85       	ldd	r24, Y+9	; 0x09
 7f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 7fa:	9e 87       	std	Y+14, r25	; 0x0e
 7fc:	8d 87       	std	Y+13, r24	; 0x0d
 7fe:	8d 85       	ldd	r24, Y+13	; 0x0d
 800:	9e 85       	ldd	r25, Y+14	; 0x0e
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	f1 f7       	brne	.-4      	; 0x802 <LCD_Init+0x104>
 806:	9e 87       	std	Y+14, r25	; 0x0e
 808:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(20);			/* LCD Power ON delay always >15ms */

	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
 80a:	88 e3       	ldi	r24, 0x38	; 56
 80c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
 810:	8c e0       	ldi	r24, 0x0C	; 12
 812:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x06);		/* Auto Increment cursor */
 816:	86 e0       	ldi	r24, 0x06	; 6
 818:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x01);		/* Clear display */
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x80);		/* Cursor at home position */
 822:	80 e8       	ldi	r24, 0x80	; 128
 824:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
}
 828:	00 00       	nop
 82a:	2e 96       	adiw	r28, 0x0e	; 14
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	de bf       	out	0x3e, r29	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	cd bf       	out	0x3d, r28	; 61
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <LCD_String>:

void LCD_String (char *str)		/* Send string to LCD function */
{
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	00 d0       	rcall	.+0      	; 0x842 <LCD_String+0x6>
 842:	00 d0       	rcall	.+0      	; 0x844 <LCD_String+0x8>
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	9c 83       	std	Y+4, r25	; 0x04
 84a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 84c:	1a 82       	std	Y+2, r1	; 0x02
 84e:	19 82       	std	Y+1, r1	; 0x01
 850:	0f c0       	rjmp	.+30     	; 0x870 <__stack+0x11>
	{
		LCD_Char (str[i]);
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	9a 81       	ldd	r25, Y+2	; 0x02
 856:	2b 81       	ldd	r18, Y+3	; 0x03
 858:	3c 81       	ldd	r19, Y+4	; 0x04
 85a:	82 0f       	add	r24, r18
 85c:	93 1f       	adc	r25, r19
 85e:	fc 01       	movw	r30, r24
 860:	80 81       	ld	r24, Z
 862:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 866:	89 81       	ldd	r24, Y+1	; 0x01
 868:	9a 81       	ldd	r25, Y+2	; 0x02
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	9a 83       	std	Y+2, r25	; 0x02
 86e:	89 83       	std	Y+1, r24	; 0x01
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	9a 81       	ldd	r25, Y+2	; 0x02
 874:	2b 81       	ldd	r18, Y+3	; 0x03
 876:	3c 81       	ldd	r19, Y+4	; 0x04
 878:	82 0f       	add	r24, r18
 87a:	93 1f       	adc	r25, r19
 87c:	fc 01       	movw	r30, r24
 87e:	80 81       	ld	r24, Z
 880:	88 23       	and	r24, r24
 882:	39 f7       	brne	.-50     	; 0x852 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
 884:	00 00       	nop
 886:	0f 90       	pop	r0
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <LCD_String_xy+0x6>
 89a:	00 d0       	rcall	.+0      	; 0x89c <LCD_String_xy+0x8>
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	89 83       	std	Y+1, r24	; 0x01
 8a2:	6a 83       	std	Y+2, r22	; 0x02
 8a4:	5c 83       	std	Y+4, r21	; 0x04
 8a6:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	88 23       	and	r24, r24
 8ac:	49 f4       	brne	.+18     	; 0x8c0 <LCD_String_xy+0x2c>
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	80 31       	cpi	r24, 0x10	; 16
 8b2:	34 f4       	brge	.+12     	; 0x8c0 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	8f 70       	andi	r24, 0x0F	; 15
 8b8:	80 68       	ori	r24, 0x80	; 128
 8ba:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 8be:	0b c0       	rjmp	.+22     	; 0x8d6 <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	41 f4       	brne	.+16     	; 0x8d6 <LCD_String_xy+0x42>
 8c6:	8a 81       	ldd	r24, Y+2	; 0x02
 8c8:	80 31       	cpi	r24, 0x10	; 16
 8ca:	2c f4       	brge	.+10     	; 0x8d6 <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	8f 70       	andi	r24, 0x0F	; 15
 8d0:	80 6c       	ori	r24, 0xC0	; 192
 8d2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 8d6:	8b 81       	ldd	r24, Y+3	; 0x03
 8d8:	9c 81       	ldd	r25, Y+4	; 0x04
 8da:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_String>
}
 8de:	00 00       	nop
 8e0:	0f 90       	pop	r0
 8e2:	0f 90       	pop	r0
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	08 95       	ret

000008ee <LCD_Clear>:

void LCD_Clear()
{
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
	LCD_Command (0x01);		/* clear display */
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
}
 902:	00 00       	nop
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	08 95       	ret

0000090a <main>:

int main()
{
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	a0 97       	sbiw	r28, 0x20	; 32
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	f8 94       	cli
 918:	de bf       	out	0x3e, r29	; 62
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	cd bf       	out	0x3d, r28	; 61

	LCD_Init();			/* Initialize LCD */
 91e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_Init>

	LCD_String("AlienVasion Game");	/* write string on 1st line of LCD*/
 922:	80 e6       	ldi	r24, 0x60	; 96
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_String>
	LCD_Command(0xC0);		/* Go to 2nd line*/
 92a:	80 ec       	ldi	r24, 0xC0	; 192
 92c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String("    CSE-306");	/* Write string on 2nd line*/
 930:	81 e7       	ldi	r24, 0x71	; 113
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_String>
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	90 e4       	ldi	r25, 0x40	; 64
 93c:	ac e9       	ldi	r26, 0x9C	; 156
 93e:	b5 e4       	ldi	r27, 0x45	; 69
 940:	89 87       	std	Y+9, r24	; 0x09
 942:	9a 87       	std	Y+10, r25	; 0x0a
 944:	ab 87       	std	Y+11, r26	; 0x0b
 946:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 948:	20 e0       	ldi	r18, 0x00	; 0
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	4a ef       	ldi	r20, 0xFA	; 250
 94e:	54 e4       	ldi	r21, 0x44	; 68
 950:	69 85       	ldd	r22, Y+9	; 0x09
 952:	7a 85       	ldd	r23, Y+10	; 0x0a
 954:	8b 85       	ldd	r24, Y+11	; 0x0b
 956:	9c 85       	ldd	r25, Y+12	; 0x0c
 958:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 95c:	dc 01       	movw	r26, r24
 95e:	cb 01       	movw	r24, r22
 960:	8d 87       	std	Y+13, r24	; 0x0d
 962:	9e 87       	std	Y+14, r25	; 0x0e
 964:	af 87       	std	Y+15, r26	; 0x0f
 966:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	40 e8       	ldi	r20, 0x80	; 128
 96e:	5f e3       	ldi	r21, 0x3F	; 63
 970:	6d 85       	ldd	r22, Y+13	; 0x0d
 972:	7e 85       	ldd	r23, Y+14	; 0x0e
 974:	8f 85       	ldd	r24, Y+15	; 0x0f
 976:	98 89       	ldd	r25, Y+16	; 0x10
 978:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 97c:	88 23       	and	r24, r24
 97e:	2c f4       	brge	.+10     	; 0x98a <main+0x80>
		__ticks = 1;
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	9a 8b       	std	Y+18, r25	; 0x12
 986:	89 8b       	std	Y+17, r24	; 0x11
 988:	3f c0       	rjmp	.+126    	; 0xa08 <main+0xfe>
	else if (__tmp > 65535)
 98a:	20 e0       	ldi	r18, 0x00	; 0
 98c:	3f ef       	ldi	r19, 0xFF	; 255
 98e:	4f e7       	ldi	r20, 0x7F	; 127
 990:	57 e4       	ldi	r21, 0x47	; 71
 992:	6d 85       	ldd	r22, Y+13	; 0x0d
 994:	7e 85       	ldd	r23, Y+14	; 0x0e
 996:	8f 85       	ldd	r24, Y+15	; 0x0f
 998:	98 89       	ldd	r25, Y+16	; 0x10
 99a:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 99e:	18 16       	cp	r1, r24
 9a0:	4c f5       	brge	.+82     	; 0x9f4 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9a2:	20 e0       	ldi	r18, 0x00	; 0
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	40 e2       	ldi	r20, 0x20	; 32
 9a8:	51 e4       	ldi	r21, 0x41	; 65
 9aa:	69 85       	ldd	r22, Y+9	; 0x09
 9ac:	7a 85       	ldd	r23, Y+10	; 0x0a
 9ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 9b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 9b2:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 9b6:	dc 01       	movw	r26, r24
 9b8:	cb 01       	movw	r24, r22
 9ba:	bc 01       	movw	r22, r24
 9bc:	cd 01       	movw	r24, r26
 9be:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 9c2:	dc 01       	movw	r26, r24
 9c4:	cb 01       	movw	r24, r22
 9c6:	9a 8b       	std	Y+18, r25	; 0x12
 9c8:	89 8b       	std	Y+17, r24	; 0x11
 9ca:	0f c0       	rjmp	.+30     	; 0x9ea <main+0xe0>
 9cc:	88 ec       	ldi	r24, 0xC8	; 200
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	9c 8b       	std	Y+20, r25	; 0x14
 9d2:	8b 8b       	std	Y+19, r24	; 0x13
 9d4:	8b 89       	ldd	r24, Y+19	; 0x13
 9d6:	9c 89       	ldd	r25, Y+20	; 0x14
 9d8:	01 97       	sbiw	r24, 0x01	; 1
 9da:	f1 f7       	brne	.-4      	; 0x9d8 <main+0xce>
 9dc:	9c 8b       	std	Y+20, r25	; 0x14
 9de:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9e0:	89 89       	ldd	r24, Y+17	; 0x11
 9e2:	9a 89       	ldd	r25, Y+18	; 0x12
 9e4:	01 97       	sbiw	r24, 0x01	; 1
 9e6:	9a 8b       	std	Y+18, r25	; 0x12
 9e8:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9ea:	89 89       	ldd	r24, Y+17	; 0x11
 9ec:	9a 89       	ldd	r25, Y+18	; 0x12
 9ee:	89 2b       	or	r24, r25
 9f0:	69 f7       	brne	.-38     	; 0x9cc <main+0xc2>
 9f2:	14 c0       	rjmp	.+40     	; 0xa1c <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9f4:	6d 85       	ldd	r22, Y+13	; 0x0d
 9f6:	7e 85       	ldd	r23, Y+14	; 0x0e
 9f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 9fa:	98 89       	ldd	r25, Y+16	; 0x10
 9fc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 a00:	dc 01       	movw	r26, r24
 a02:	cb 01       	movw	r24, r22
 a04:	9a 8b       	std	Y+18, r25	; 0x12
 a06:	89 8b       	std	Y+17, r24	; 0x11
 a08:	89 89       	ldd	r24, Y+17	; 0x11
 a0a:	9a 89       	ldd	r25, Y+18	; 0x12
 a0c:	9e 8b       	std	Y+22, r25	; 0x16
 a0e:	8d 8b       	std	Y+21, r24	; 0x15
 a10:	8d 89       	ldd	r24, Y+21	; 0x15
 a12:	9e 89       	ldd	r25, Y+22	; 0x16
 a14:	01 97       	sbiw	r24, 0x01	; 1
 a16:	f1 f7       	brne	.-4      	; 0xa14 <main+0x10a>
 a18:	9e 8b       	std	Y+22, r25	; 0x16
 a1a:	8d 8b       	std	Y+21, r24	; 0x15

	_delay_ms(5000);

	LCD_Command(0x01);  //clear Display
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x80);  //cursor at first line
 a22:	80 e8       	ldi	r24, 0x80	; 128
 a24:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	char* sR="Ready!";
 a28:	8d e7       	ldi	r24, 0x7D	; 125
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	9e 83       	std	Y+6, r25	; 0x06
 a2e:	8d 83       	std	Y+5, r24	; 0x05

	LCD_String(sR);
 a30:	8d 81       	ldd	r24, Y+5	; 0x05
 a32:	9e 81       	ldd	r25, Y+6	; 0x06
 a34:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_String>

	LCD_Command(0xC0);
 a38:	80 ec       	ldi	r24, 0xC0	; 192
 a3a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>

	DDRC = DDRC & (~(1<<3));		/* Make PD2 as input pin */
 a3e:	84 e3       	ldi	r24, 0x34	; 52
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	24 e3       	ldi	r18, 0x34	; 52
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	f9 01       	movw	r30, r18
 a48:	20 81       	ld	r18, Z
 a4a:	27 7f       	andi	r18, 0xF7	; 247
 a4c:	fc 01       	movw	r30, r24
 a4e:	20 83       	st	Z, r18
    PORTC = PORTC | (1<<3);		/* Enable pull-up on PD2 by writing 1 to it */
 a50:	85 e3       	ldi	r24, 0x35	; 53
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	25 e3       	ldi	r18, 0x35	; 53
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	f9 01       	movw	r30, r18
 a5a:	20 81       	ld	r18, Z
 a5c:	28 60       	ori	r18, 0x08	; 8
 a5e:	fc 01       	movw	r30, r24
 a60:	20 83       	st	Z, r18
    int pin_status;
    while(1)
    {
        pin_status = PINC & (1<<3);	/*Read status of pin PD2 */
 a62:	83 e3       	ldi	r24, 0x33	; 51
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	fc 01       	movw	r30, r24
 a68:	80 81       	ld	r24, Z
 a6a:	88 2f       	mov	r24, r24
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	88 70       	andi	r24, 0x08	; 8
 a70:	99 27       	eor	r25, r25
 a72:	98 87       	std	Y+8, r25	; 0x08
 a74:	8f 83       	std	Y+7, r24	; 0x07
        if(!pin_status)			/* Transmit status of pin PD2 on to pin PD3 to drive LED. */
 a76:	8f 81       	ldd	r24, Y+7	; 0x07
 a78:	98 85       	ldd	r25, Y+8	; 0x08
 a7a:	89 2b       	or	r24, r25
 a7c:	91 f7       	brne	.-28     	; 0xa62 <main+0x158>
        {
           LCD_String("FIRE! |>");
 a7e:	84 e8       	ldi	r24, 0x84	; 132
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 1e 04 	call	0x83c	; 0x83c <LCD_String>
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	aa ef       	ldi	r26, 0xFA	; 250
 a8c:	b3 e4       	ldi	r27, 0x43	; 67
 a8e:	89 83       	std	Y+1, r24	; 0x01
 a90:	9a 83       	std	Y+2, r25	; 0x02
 a92:	ab 83       	std	Y+3, r26	; 0x03
 a94:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 a96:	20 e0       	ldi	r18, 0x00	; 0
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	4a ef       	ldi	r20, 0xFA	; 250
 a9c:	54 e4       	ldi	r21, 0x44	; 68
 a9e:	69 81       	ldd	r22, Y+1	; 0x01
 aa0:	7a 81       	ldd	r23, Y+2	; 0x02
 aa2:	8b 81       	ldd	r24, Y+3	; 0x03
 aa4:	9c 81       	ldd	r25, Y+4	; 0x04
 aa6:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 aaa:	dc 01       	movw	r26, r24
 aac:	cb 01       	movw	r24, r22
 aae:	8f 8b       	std	Y+23, r24	; 0x17
 ab0:	98 8f       	std	Y+24, r25	; 0x18
 ab2:	a9 8f       	std	Y+25, r26	; 0x19
 ab4:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 ab6:	20 e0       	ldi	r18, 0x00	; 0
 ab8:	30 e0       	ldi	r19, 0x00	; 0
 aba:	40 e8       	ldi	r20, 0x80	; 128
 abc:	5f e3       	ldi	r21, 0x3F	; 63
 abe:	6f 89       	ldd	r22, Y+23	; 0x17
 ac0:	78 8d       	ldd	r23, Y+24	; 0x18
 ac2:	89 8d       	ldd	r24, Y+25	; 0x19
 ac4:	9a 8d       	ldd	r25, Y+26	; 0x1a
 ac6:	0e 94 26 06 	call	0xc4c	; 0xc4c <__cmpsf2>
 aca:	88 23       	and	r24, r24
 acc:	2c f4       	brge	.+10     	; 0xad8 <main+0x1ce>
		__ticks = 1;
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	9c 8f       	std	Y+28, r25	; 0x1c
 ad4:	8b 8f       	std	Y+27, r24	; 0x1b
 ad6:	3f c0       	rjmp	.+126    	; 0xb56 <main+0x24c>
	else if (__tmp > 65535)
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	3f ef       	ldi	r19, 0xFF	; 255
 adc:	4f e7       	ldi	r20, 0x7F	; 127
 ade:	57 e4       	ldi	r21, 0x47	; 71
 ae0:	6f 89       	ldd	r22, Y+23	; 0x17
 ae2:	78 8d       	ldd	r23, Y+24	; 0x18
 ae4:	89 8d       	ldd	r24, Y+25	; 0x19
 ae6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 ae8:	0e 94 41 07 	call	0xe82	; 0xe82 <__gesf2>
 aec:	18 16       	cp	r1, r24
 aee:	4c f5       	brge	.+82     	; 0xb42 <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 af0:	20 e0       	ldi	r18, 0x00	; 0
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	40 e2       	ldi	r20, 0x20	; 32
 af6:	51 e4       	ldi	r21, 0x41	; 65
 af8:	69 81       	ldd	r22, Y+1	; 0x01
 afa:	7a 81       	ldd	r23, Y+2	; 0x02
 afc:	8b 81       	ldd	r24, Y+3	; 0x03
 afe:	9c 81       	ldd	r25, Y+4	; 0x04
 b00:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
 b04:	dc 01       	movw	r26, r24
 b06:	cb 01       	movw	r24, r22
 b08:	bc 01       	movw	r22, r24
 b0a:	cd 01       	movw	r24, r26
 b0c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 b10:	dc 01       	movw	r26, r24
 b12:	cb 01       	movw	r24, r22
 b14:	9c 8f       	std	Y+28, r25	; 0x1c
 b16:	8b 8f       	std	Y+27, r24	; 0x1b
 b18:	0f c0       	rjmp	.+30     	; 0xb38 <main+0x22e>
 b1a:	88 ec       	ldi	r24, 0xC8	; 200
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	9e 8f       	std	Y+30, r25	; 0x1e
 b20:	8d 8f       	std	Y+29, r24	; 0x1d
 b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
 b24:	9e 8d       	ldd	r25, Y+30	; 0x1e
 b26:	01 97       	sbiw	r24, 0x01	; 1
 b28:	f1 f7       	brne	.-4      	; 0xb26 <main+0x21c>
 b2a:	9e 8f       	std	Y+30, r25	; 0x1e
 b2c:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
 b32:	01 97       	sbiw	r24, 0x01	; 1
 b34:	9c 8f       	std	Y+28, r25	; 0x1c
 b36:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
 b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 b3c:	89 2b       	or	r24, r25
 b3e:	69 f7       	brne	.-38     	; 0xb1a <main+0x210>
 b40:	14 c0       	rjmp	.+40     	; 0xb6a <main+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 b42:	6f 89       	ldd	r22, Y+23	; 0x17
 b44:	78 8d       	ldd	r23, Y+24	; 0x18
 b46:	89 8d       	ldd	r24, Y+25	; 0x19
 b48:	9a 8d       	ldd	r25, Y+26	; 0x1a
 b4a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
 b4e:	dc 01       	movw	r26, r24
 b50:	cb 01       	movw	r24, r22
 b52:	9c 8f       	std	Y+28, r25	; 0x1c
 b54:	8b 8f       	std	Y+27, r24	; 0x1b
 b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
 b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
 b5a:	98 a3       	std	Y+32, r25	; 0x20
 b5c:	8f 8f       	std	Y+31, r24	; 0x1f
 b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 b60:	98 a1       	ldd	r25, Y+32	; 0x20
 b62:	01 97       	sbiw	r24, 0x01	; 1
 b64:	f1 f7       	brne	.-4      	; 0xb62 <main+0x258>
 b66:	98 a3       	std	Y+32, r25	; 0x20
 b68:	8f 8f       	std	Y+31, r24	; 0x1f
           _delay_ms(500);
           LCD_Command(0x01);
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
        }
    }
 b70:	78 cf       	rjmp	.-272    	; 0xa62 <main+0x158>

00000b72 <__subsf3>:
 b72:	50 58       	subi	r21, 0x80	; 128

00000b74 <__addsf3>:
 b74:	bb 27       	eor	r27, r27
 b76:	aa 27       	eor	r26, r26
 b78:	0e 94 d1 05 	call	0xba2	; 0xba2 <__addsf3x>
 b7c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_round>
 b80:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_pscA>
 b84:	38 f0       	brcs	.+14     	; 0xb94 <__addsf3+0x20>
 b86:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscB>
 b8a:	20 f0       	brcs	.+8      	; 0xb94 <__addsf3+0x20>
 b8c:	39 f4       	brne	.+14     	; 0xb9c <__addsf3+0x28>
 b8e:	9f 3f       	cpi	r25, 0xFF	; 255
 b90:	19 f4       	brne	.+6      	; 0xb98 <__addsf3+0x24>
 b92:	26 f4       	brtc	.+8      	; 0xb9c <__addsf3+0x28>
 b94:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_nan>
 b98:	0e f4       	brtc	.+2      	; 0xb9c <__addsf3+0x28>
 b9a:	e0 95       	com	r30
 b9c:	e7 fb       	bst	r30, 7
 b9e:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_inf>

00000ba2 <__addsf3x>:
 ba2:	e9 2f       	mov	r30, r25
 ba4:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_split3>
 ba8:	58 f3       	brcs	.-42     	; 0xb80 <__addsf3+0xc>
 baa:	ba 17       	cp	r27, r26
 bac:	62 07       	cpc	r22, r18
 bae:	73 07       	cpc	r23, r19
 bb0:	84 07       	cpc	r24, r20
 bb2:	95 07       	cpc	r25, r21
 bb4:	20 f0       	brcs	.+8      	; 0xbbe <__addsf3x+0x1c>
 bb6:	79 f4       	brne	.+30     	; 0xbd6 <__addsf3x+0x34>
 bb8:	a6 f5       	brtc	.+104    	; 0xc22 <__addsf3x+0x80>
 bba:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_zero>
 bbe:	0e f4       	brtc	.+2      	; 0xbc2 <__addsf3x+0x20>
 bc0:	e0 95       	com	r30
 bc2:	0b 2e       	mov	r0, r27
 bc4:	ba 2f       	mov	r27, r26
 bc6:	a0 2d       	mov	r26, r0
 bc8:	0b 01       	movw	r0, r22
 bca:	b9 01       	movw	r22, r18
 bcc:	90 01       	movw	r18, r0
 bce:	0c 01       	movw	r0, r24
 bd0:	ca 01       	movw	r24, r20
 bd2:	a0 01       	movw	r20, r0
 bd4:	11 24       	eor	r1, r1
 bd6:	ff 27       	eor	r31, r31
 bd8:	59 1b       	sub	r21, r25
 bda:	99 f0       	breq	.+38     	; 0xc02 <__addsf3x+0x60>
 bdc:	59 3f       	cpi	r21, 0xF9	; 249
 bde:	50 f4       	brcc	.+20     	; 0xbf4 <__addsf3x+0x52>
 be0:	50 3e       	cpi	r21, 0xE0	; 224
 be2:	68 f1       	brcs	.+90     	; 0xc3e <__addsf3x+0x9c>
 be4:	1a 16       	cp	r1, r26
 be6:	f0 40       	sbci	r31, 0x00	; 0
 be8:	a2 2f       	mov	r26, r18
 bea:	23 2f       	mov	r18, r19
 bec:	34 2f       	mov	r19, r20
 bee:	44 27       	eor	r20, r20
 bf0:	58 5f       	subi	r21, 0xF8	; 248
 bf2:	f3 cf       	rjmp	.-26     	; 0xbda <__addsf3x+0x38>
 bf4:	46 95       	lsr	r20
 bf6:	37 95       	ror	r19
 bf8:	27 95       	ror	r18
 bfa:	a7 95       	ror	r26
 bfc:	f0 40       	sbci	r31, 0x00	; 0
 bfe:	53 95       	inc	r21
 c00:	c9 f7       	brne	.-14     	; 0xbf4 <__addsf3x+0x52>
 c02:	7e f4       	brtc	.+30     	; 0xc22 <__addsf3x+0x80>
 c04:	1f 16       	cp	r1, r31
 c06:	ba 0b       	sbc	r27, r26
 c08:	62 0b       	sbc	r22, r18
 c0a:	73 0b       	sbc	r23, r19
 c0c:	84 0b       	sbc	r24, r20
 c0e:	ba f0       	brmi	.+46     	; 0xc3e <__addsf3x+0x9c>
 c10:	91 50       	subi	r25, 0x01	; 1
 c12:	a1 f0       	breq	.+40     	; 0xc3c <__addsf3x+0x9a>
 c14:	ff 0f       	add	r31, r31
 c16:	bb 1f       	adc	r27, r27
 c18:	66 1f       	adc	r22, r22
 c1a:	77 1f       	adc	r23, r23
 c1c:	88 1f       	adc	r24, r24
 c1e:	c2 f7       	brpl	.-16     	; 0xc10 <__addsf3x+0x6e>
 c20:	0e c0       	rjmp	.+28     	; 0xc3e <__addsf3x+0x9c>
 c22:	ba 0f       	add	r27, r26
 c24:	62 1f       	adc	r22, r18
 c26:	73 1f       	adc	r23, r19
 c28:	84 1f       	adc	r24, r20
 c2a:	48 f4       	brcc	.+18     	; 0xc3e <__addsf3x+0x9c>
 c2c:	87 95       	ror	r24
 c2e:	77 95       	ror	r23
 c30:	67 95       	ror	r22
 c32:	b7 95       	ror	r27
 c34:	f7 95       	ror	r31
 c36:	9e 3f       	cpi	r25, 0xFE	; 254
 c38:	08 f0       	brcs	.+2      	; 0xc3c <__addsf3x+0x9a>
 c3a:	b0 cf       	rjmp	.-160    	; 0xb9c <__addsf3+0x28>
 c3c:	93 95       	inc	r25
 c3e:	88 0f       	add	r24, r24
 c40:	08 f0       	brcs	.+2      	; 0xc44 <__addsf3x+0xa2>
 c42:	99 27       	eor	r25, r25
 c44:	ee 0f       	add	r30, r30
 c46:	97 95       	ror	r25
 c48:	87 95       	ror	r24
 c4a:	08 95       	ret

00000c4c <__cmpsf2>:
 c4c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_cmp>
 c50:	08 f4       	brcc	.+2      	; 0xc54 <__cmpsf2+0x8>
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	08 95       	ret

00000c56 <__divsf3>:
 c56:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__divsf3x>
 c5a:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_round>
 c5e:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscB>
 c62:	58 f0       	brcs	.+22     	; 0xc7a <__divsf3+0x24>
 c64:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_pscA>
 c68:	40 f0       	brcs	.+16     	; 0xc7a <__divsf3+0x24>
 c6a:	29 f4       	brne	.+10     	; 0xc76 <__divsf3+0x20>
 c6c:	5f 3f       	cpi	r21, 0xFF	; 255
 c6e:	29 f0       	breq	.+10     	; 0xc7a <__divsf3+0x24>
 c70:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_inf>
 c74:	51 11       	cpse	r21, r1
 c76:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_szero>
 c7a:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_nan>

00000c7e <__divsf3x>:
 c7e:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_split3>
 c82:	68 f3       	brcs	.-38     	; 0xc5e <__divsf3+0x8>

00000c84 <__divsf3_pse>:
 c84:	99 23       	and	r25, r25
 c86:	b1 f3       	breq	.-20     	; 0xc74 <__divsf3+0x1e>
 c88:	55 23       	and	r21, r21
 c8a:	91 f3       	breq	.-28     	; 0xc70 <__divsf3+0x1a>
 c8c:	95 1b       	sub	r25, r21
 c8e:	55 0b       	sbc	r21, r21
 c90:	bb 27       	eor	r27, r27
 c92:	aa 27       	eor	r26, r26
 c94:	62 17       	cp	r22, r18
 c96:	73 07       	cpc	r23, r19
 c98:	84 07       	cpc	r24, r20
 c9a:	38 f0       	brcs	.+14     	; 0xcaa <__divsf3_pse+0x26>
 c9c:	9f 5f       	subi	r25, 0xFF	; 255
 c9e:	5f 4f       	sbci	r21, 0xFF	; 255
 ca0:	22 0f       	add	r18, r18
 ca2:	33 1f       	adc	r19, r19
 ca4:	44 1f       	adc	r20, r20
 ca6:	aa 1f       	adc	r26, r26
 ca8:	a9 f3       	breq	.-22     	; 0xc94 <__divsf3_pse+0x10>
 caa:	35 d0       	rcall	.+106    	; 0xd16 <__divsf3_pse+0x92>
 cac:	0e 2e       	mov	r0, r30
 cae:	3a f0       	brmi	.+14     	; 0xcbe <__divsf3_pse+0x3a>
 cb0:	e0 e8       	ldi	r30, 0x80	; 128
 cb2:	32 d0       	rcall	.+100    	; 0xd18 <__divsf3_pse+0x94>
 cb4:	91 50       	subi	r25, 0x01	; 1
 cb6:	50 40       	sbci	r21, 0x00	; 0
 cb8:	e6 95       	lsr	r30
 cba:	00 1c       	adc	r0, r0
 cbc:	ca f7       	brpl	.-14     	; 0xcb0 <__divsf3_pse+0x2c>
 cbe:	2b d0       	rcall	.+86     	; 0xd16 <__divsf3_pse+0x92>
 cc0:	fe 2f       	mov	r31, r30
 cc2:	29 d0       	rcall	.+82     	; 0xd16 <__divsf3_pse+0x92>
 cc4:	66 0f       	add	r22, r22
 cc6:	77 1f       	adc	r23, r23
 cc8:	88 1f       	adc	r24, r24
 cca:	bb 1f       	adc	r27, r27
 ccc:	26 17       	cp	r18, r22
 cce:	37 07       	cpc	r19, r23
 cd0:	48 07       	cpc	r20, r24
 cd2:	ab 07       	cpc	r26, r27
 cd4:	b0 e8       	ldi	r27, 0x80	; 128
 cd6:	09 f0       	breq	.+2      	; 0xcda <__divsf3_pse+0x56>
 cd8:	bb 0b       	sbc	r27, r27
 cda:	80 2d       	mov	r24, r0
 cdc:	bf 01       	movw	r22, r30
 cde:	ff 27       	eor	r31, r31
 ce0:	93 58       	subi	r25, 0x83	; 131
 ce2:	5f 4f       	sbci	r21, 0xFF	; 255
 ce4:	3a f0       	brmi	.+14     	; 0xcf4 <__divsf3_pse+0x70>
 ce6:	9e 3f       	cpi	r25, 0xFE	; 254
 ce8:	51 05       	cpc	r21, r1
 cea:	78 f0       	brcs	.+30     	; 0xd0a <__divsf3_pse+0x86>
 cec:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_inf>
 cf0:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_szero>
 cf4:	5f 3f       	cpi	r21, 0xFF	; 255
 cf6:	e4 f3       	brlt	.-8      	; 0xcf0 <__divsf3_pse+0x6c>
 cf8:	98 3e       	cpi	r25, 0xE8	; 232
 cfa:	d4 f3       	brlt	.-12     	; 0xcf0 <__divsf3_pse+0x6c>
 cfc:	86 95       	lsr	r24
 cfe:	77 95       	ror	r23
 d00:	67 95       	ror	r22
 d02:	b7 95       	ror	r27
 d04:	f7 95       	ror	r31
 d06:	9f 5f       	subi	r25, 0xFF	; 255
 d08:	c9 f7       	brne	.-14     	; 0xcfc <__divsf3_pse+0x78>
 d0a:	88 0f       	add	r24, r24
 d0c:	91 1d       	adc	r25, r1
 d0e:	96 95       	lsr	r25
 d10:	87 95       	ror	r24
 d12:	97 f9       	bld	r25, 7
 d14:	08 95       	ret
 d16:	e1 e0       	ldi	r30, 0x01	; 1
 d18:	66 0f       	add	r22, r22
 d1a:	77 1f       	adc	r23, r23
 d1c:	88 1f       	adc	r24, r24
 d1e:	bb 1f       	adc	r27, r27
 d20:	62 17       	cp	r22, r18
 d22:	73 07       	cpc	r23, r19
 d24:	84 07       	cpc	r24, r20
 d26:	ba 07       	cpc	r27, r26
 d28:	20 f0       	brcs	.+8      	; 0xd32 <__divsf3_pse+0xae>
 d2a:	62 1b       	sub	r22, r18
 d2c:	73 0b       	sbc	r23, r19
 d2e:	84 0b       	sbc	r24, r20
 d30:	ba 0b       	sbc	r27, r26
 d32:	ee 1f       	adc	r30, r30
 d34:	88 f7       	brcc	.-30     	; 0xd18 <__divsf3_pse+0x94>
 d36:	e0 95       	com	r30
 d38:	08 95       	ret

00000d3a <__fixunssfsi>:
 d3a:	0e 94 20 07 	call	0xe40	; 0xe40 <__fp_splitA>
 d3e:	88 f0       	brcs	.+34     	; 0xd62 <__fixunssfsi+0x28>
 d40:	9f 57       	subi	r25, 0x7F	; 127
 d42:	98 f0       	brcs	.+38     	; 0xd6a <__fixunssfsi+0x30>
 d44:	b9 2f       	mov	r27, r25
 d46:	99 27       	eor	r25, r25
 d48:	b7 51       	subi	r27, 0x17	; 23
 d4a:	b0 f0       	brcs	.+44     	; 0xd78 <__fixunssfsi+0x3e>
 d4c:	e1 f0       	breq	.+56     	; 0xd86 <__fixunssfsi+0x4c>
 d4e:	66 0f       	add	r22, r22
 d50:	77 1f       	adc	r23, r23
 d52:	88 1f       	adc	r24, r24
 d54:	99 1f       	adc	r25, r25
 d56:	1a f0       	brmi	.+6      	; 0xd5e <__fixunssfsi+0x24>
 d58:	ba 95       	dec	r27
 d5a:	c9 f7       	brne	.-14     	; 0xd4e <__fixunssfsi+0x14>
 d5c:	14 c0       	rjmp	.+40     	; 0xd86 <__fixunssfsi+0x4c>
 d5e:	b1 30       	cpi	r27, 0x01	; 1
 d60:	91 f0       	breq	.+36     	; 0xd86 <__fixunssfsi+0x4c>
 d62:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fp_zero>
 d66:	b1 e0       	ldi	r27, 0x01	; 1
 d68:	08 95       	ret
 d6a:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__fp_zero>
 d6e:	67 2f       	mov	r22, r23
 d70:	78 2f       	mov	r23, r24
 d72:	88 27       	eor	r24, r24
 d74:	b8 5f       	subi	r27, 0xF8	; 248
 d76:	39 f0       	breq	.+14     	; 0xd86 <__fixunssfsi+0x4c>
 d78:	b9 3f       	cpi	r27, 0xF9	; 249
 d7a:	cc f3       	brlt	.-14     	; 0xd6e <__fixunssfsi+0x34>
 d7c:	86 95       	lsr	r24
 d7e:	77 95       	ror	r23
 d80:	67 95       	ror	r22
 d82:	b3 95       	inc	r27
 d84:	d9 f7       	brne	.-10     	; 0xd7c <__fixunssfsi+0x42>
 d86:	3e f4       	brtc	.+14     	; 0xd96 <__fixunssfsi+0x5c>
 d88:	90 95       	com	r25
 d8a:	80 95       	com	r24
 d8c:	70 95       	com	r23
 d8e:	61 95       	neg	r22
 d90:	7f 4f       	sbci	r23, 0xFF	; 255
 d92:	8f 4f       	sbci	r24, 0xFF	; 255
 d94:	9f 4f       	sbci	r25, 0xFF	; 255
 d96:	08 95       	ret

00000d98 <__fp_cmp>:
 d98:	99 0f       	add	r25, r25
 d9a:	00 08       	sbc	r0, r0
 d9c:	55 0f       	add	r21, r21
 d9e:	aa 0b       	sbc	r26, r26
 da0:	e0 e8       	ldi	r30, 0x80	; 128
 da2:	fe ef       	ldi	r31, 0xFE	; 254
 da4:	16 16       	cp	r1, r22
 da6:	17 06       	cpc	r1, r23
 da8:	e8 07       	cpc	r30, r24
 daa:	f9 07       	cpc	r31, r25
 dac:	c0 f0       	brcs	.+48     	; 0xdde <__fp_cmp+0x46>
 dae:	12 16       	cp	r1, r18
 db0:	13 06       	cpc	r1, r19
 db2:	e4 07       	cpc	r30, r20
 db4:	f5 07       	cpc	r31, r21
 db6:	98 f0       	brcs	.+38     	; 0xdde <__fp_cmp+0x46>
 db8:	62 1b       	sub	r22, r18
 dba:	73 0b       	sbc	r23, r19
 dbc:	84 0b       	sbc	r24, r20
 dbe:	95 0b       	sbc	r25, r21
 dc0:	39 f4       	brne	.+14     	; 0xdd0 <__fp_cmp+0x38>
 dc2:	0a 26       	eor	r0, r26
 dc4:	61 f0       	breq	.+24     	; 0xdde <__fp_cmp+0x46>
 dc6:	23 2b       	or	r18, r19
 dc8:	24 2b       	or	r18, r20
 dca:	25 2b       	or	r18, r21
 dcc:	21 f4       	brne	.+8      	; 0xdd6 <__fp_cmp+0x3e>
 dce:	08 95       	ret
 dd0:	0a 26       	eor	r0, r26
 dd2:	09 f4       	brne	.+2      	; 0xdd6 <__fp_cmp+0x3e>
 dd4:	a1 40       	sbci	r26, 0x01	; 1
 dd6:	a6 95       	lsr	r26
 dd8:	8f ef       	ldi	r24, 0xFF	; 255
 dda:	81 1d       	adc	r24, r1
 ddc:	81 1d       	adc	r24, r1
 dde:	08 95       	ret

00000de0 <__fp_inf>:
 de0:	97 f9       	bld	r25, 7
 de2:	9f 67       	ori	r25, 0x7F	; 127
 de4:	80 e8       	ldi	r24, 0x80	; 128
 de6:	70 e0       	ldi	r23, 0x00	; 0
 de8:	60 e0       	ldi	r22, 0x00	; 0
 dea:	08 95       	ret

00000dec <__fp_nan>:
 dec:	9f ef       	ldi	r25, 0xFF	; 255
 dee:	80 ec       	ldi	r24, 0xC0	; 192
 df0:	08 95       	ret

00000df2 <__fp_pscA>:
 df2:	00 24       	eor	r0, r0
 df4:	0a 94       	dec	r0
 df6:	16 16       	cp	r1, r22
 df8:	17 06       	cpc	r1, r23
 dfa:	18 06       	cpc	r1, r24
 dfc:	09 06       	cpc	r0, r25
 dfe:	08 95       	ret

00000e00 <__fp_pscB>:
 e00:	00 24       	eor	r0, r0
 e02:	0a 94       	dec	r0
 e04:	12 16       	cp	r1, r18
 e06:	13 06       	cpc	r1, r19
 e08:	14 06       	cpc	r1, r20
 e0a:	05 06       	cpc	r0, r21
 e0c:	08 95       	ret

00000e0e <__fp_round>:
 e0e:	09 2e       	mov	r0, r25
 e10:	03 94       	inc	r0
 e12:	00 0c       	add	r0, r0
 e14:	11 f4       	brne	.+4      	; 0xe1a <__fp_round+0xc>
 e16:	88 23       	and	r24, r24
 e18:	52 f0       	brmi	.+20     	; 0xe2e <__fp_round+0x20>
 e1a:	bb 0f       	add	r27, r27
 e1c:	40 f4       	brcc	.+16     	; 0xe2e <__fp_round+0x20>
 e1e:	bf 2b       	or	r27, r31
 e20:	11 f4       	brne	.+4      	; 0xe26 <__fp_round+0x18>
 e22:	60 ff       	sbrs	r22, 0
 e24:	04 c0       	rjmp	.+8      	; 0xe2e <__fp_round+0x20>
 e26:	6f 5f       	subi	r22, 0xFF	; 255
 e28:	7f 4f       	sbci	r23, 0xFF	; 255
 e2a:	8f 4f       	sbci	r24, 0xFF	; 255
 e2c:	9f 4f       	sbci	r25, 0xFF	; 255
 e2e:	08 95       	ret

00000e30 <__fp_split3>:
 e30:	57 fd       	sbrc	r21, 7
 e32:	90 58       	subi	r25, 0x80	; 128
 e34:	44 0f       	add	r20, r20
 e36:	55 1f       	adc	r21, r21
 e38:	59 f0       	breq	.+22     	; 0xe50 <__fp_splitA+0x10>
 e3a:	5f 3f       	cpi	r21, 0xFF	; 255
 e3c:	71 f0       	breq	.+28     	; 0xe5a <__fp_splitA+0x1a>
 e3e:	47 95       	ror	r20

00000e40 <__fp_splitA>:
 e40:	88 0f       	add	r24, r24
 e42:	97 fb       	bst	r25, 7
 e44:	99 1f       	adc	r25, r25
 e46:	61 f0       	breq	.+24     	; 0xe60 <__fp_splitA+0x20>
 e48:	9f 3f       	cpi	r25, 0xFF	; 255
 e4a:	79 f0       	breq	.+30     	; 0xe6a <__fp_splitA+0x2a>
 e4c:	87 95       	ror	r24
 e4e:	08 95       	ret
 e50:	12 16       	cp	r1, r18
 e52:	13 06       	cpc	r1, r19
 e54:	14 06       	cpc	r1, r20
 e56:	55 1f       	adc	r21, r21
 e58:	f2 cf       	rjmp	.-28     	; 0xe3e <__fp_split3+0xe>
 e5a:	46 95       	lsr	r20
 e5c:	f1 df       	rcall	.-30     	; 0xe40 <__fp_splitA>
 e5e:	08 c0       	rjmp	.+16     	; 0xe70 <__fp_splitA+0x30>
 e60:	16 16       	cp	r1, r22
 e62:	17 06       	cpc	r1, r23
 e64:	18 06       	cpc	r1, r24
 e66:	99 1f       	adc	r25, r25
 e68:	f1 cf       	rjmp	.-30     	; 0xe4c <__fp_splitA+0xc>
 e6a:	86 95       	lsr	r24
 e6c:	71 05       	cpc	r23, r1
 e6e:	61 05       	cpc	r22, r1
 e70:	08 94       	sec
 e72:	08 95       	ret

00000e74 <__fp_zero>:
 e74:	e8 94       	clt

00000e76 <__fp_szero>:
 e76:	bb 27       	eor	r27, r27
 e78:	66 27       	eor	r22, r22
 e7a:	77 27       	eor	r23, r23
 e7c:	cb 01       	movw	r24, r22
 e7e:	97 f9       	bld	r25, 7
 e80:	08 95       	ret

00000e82 <__gesf2>:
 e82:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_cmp>
 e86:	08 f4       	brcc	.+2      	; 0xe8a <__gesf2+0x8>
 e88:	8f ef       	ldi	r24, 0xFF	; 255
 e8a:	08 95       	ret

00000e8c <__mulsf3>:
 e8c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__mulsf3x>
 e90:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__fp_round>
 e94:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__fp_pscA>
 e98:	38 f0       	brcs	.+14     	; 0xea8 <__mulsf3+0x1c>
 e9a:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_pscB>
 e9e:	20 f0       	brcs	.+8      	; 0xea8 <__mulsf3+0x1c>
 ea0:	95 23       	and	r25, r21
 ea2:	11 f0       	breq	.+4      	; 0xea8 <__mulsf3+0x1c>
 ea4:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_inf>
 ea8:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_nan>
 eac:	11 24       	eor	r1, r1
 eae:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_szero>

00000eb2 <__mulsf3x>:
 eb2:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_split3>
 eb6:	70 f3       	brcs	.-36     	; 0xe94 <__mulsf3+0x8>

00000eb8 <__mulsf3_pse>:
 eb8:	95 9f       	mul	r25, r21
 eba:	c1 f3       	breq	.-16     	; 0xeac <__mulsf3+0x20>
 ebc:	95 0f       	add	r25, r21
 ebe:	50 e0       	ldi	r21, 0x00	; 0
 ec0:	55 1f       	adc	r21, r21
 ec2:	62 9f       	mul	r22, r18
 ec4:	f0 01       	movw	r30, r0
 ec6:	72 9f       	mul	r23, r18
 ec8:	bb 27       	eor	r27, r27
 eca:	f0 0d       	add	r31, r0
 ecc:	b1 1d       	adc	r27, r1
 ece:	63 9f       	mul	r22, r19
 ed0:	aa 27       	eor	r26, r26
 ed2:	f0 0d       	add	r31, r0
 ed4:	b1 1d       	adc	r27, r1
 ed6:	aa 1f       	adc	r26, r26
 ed8:	64 9f       	mul	r22, r20
 eda:	66 27       	eor	r22, r22
 edc:	b0 0d       	add	r27, r0
 ede:	a1 1d       	adc	r26, r1
 ee0:	66 1f       	adc	r22, r22
 ee2:	82 9f       	mul	r24, r18
 ee4:	22 27       	eor	r18, r18
 ee6:	b0 0d       	add	r27, r0
 ee8:	a1 1d       	adc	r26, r1
 eea:	62 1f       	adc	r22, r18
 eec:	73 9f       	mul	r23, r19
 eee:	b0 0d       	add	r27, r0
 ef0:	a1 1d       	adc	r26, r1
 ef2:	62 1f       	adc	r22, r18
 ef4:	83 9f       	mul	r24, r19
 ef6:	a0 0d       	add	r26, r0
 ef8:	61 1d       	adc	r22, r1
 efa:	22 1f       	adc	r18, r18
 efc:	74 9f       	mul	r23, r20
 efe:	33 27       	eor	r19, r19
 f00:	a0 0d       	add	r26, r0
 f02:	61 1d       	adc	r22, r1
 f04:	23 1f       	adc	r18, r19
 f06:	84 9f       	mul	r24, r20
 f08:	60 0d       	add	r22, r0
 f0a:	21 1d       	adc	r18, r1
 f0c:	82 2f       	mov	r24, r18
 f0e:	76 2f       	mov	r23, r22
 f10:	6a 2f       	mov	r22, r26
 f12:	11 24       	eor	r1, r1
 f14:	9f 57       	subi	r25, 0x7F	; 127
 f16:	50 40       	sbci	r21, 0x00	; 0
 f18:	9a f0       	brmi	.+38     	; 0xf40 <__mulsf3_pse+0x88>
 f1a:	f1 f0       	breq	.+60     	; 0xf58 <__mulsf3_pse+0xa0>
 f1c:	88 23       	and	r24, r24
 f1e:	4a f0       	brmi	.+18     	; 0xf32 <__mulsf3_pse+0x7a>
 f20:	ee 0f       	add	r30, r30
 f22:	ff 1f       	adc	r31, r31
 f24:	bb 1f       	adc	r27, r27
 f26:	66 1f       	adc	r22, r22
 f28:	77 1f       	adc	r23, r23
 f2a:	88 1f       	adc	r24, r24
 f2c:	91 50       	subi	r25, 0x01	; 1
 f2e:	50 40       	sbci	r21, 0x00	; 0
 f30:	a9 f7       	brne	.-22     	; 0xf1c <__mulsf3_pse+0x64>
 f32:	9e 3f       	cpi	r25, 0xFE	; 254
 f34:	51 05       	cpc	r21, r1
 f36:	80 f0       	brcs	.+32     	; 0xf58 <__mulsf3_pse+0xa0>
 f38:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_inf>
 f3c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_szero>
 f40:	5f 3f       	cpi	r21, 0xFF	; 255
 f42:	e4 f3       	brlt	.-8      	; 0xf3c <__mulsf3_pse+0x84>
 f44:	98 3e       	cpi	r25, 0xE8	; 232
 f46:	d4 f3       	brlt	.-12     	; 0xf3c <__mulsf3_pse+0x84>
 f48:	86 95       	lsr	r24
 f4a:	77 95       	ror	r23
 f4c:	67 95       	ror	r22
 f4e:	b7 95       	ror	r27
 f50:	f7 95       	ror	r31
 f52:	e7 95       	ror	r30
 f54:	9f 5f       	subi	r25, 0xFF	; 255
 f56:	c1 f7       	brne	.-16     	; 0xf48 <__mulsf3_pse+0x90>
 f58:	fe 2b       	or	r31, r30
 f5a:	88 0f       	add	r24, r24
 f5c:	91 1d       	adc	r25, r1
 f5e:	96 95       	lsr	r25
 f60:	87 95       	ror	r24
 f62:	97 f9       	bld	r25, 7
 f64:	08 95       	ret

00000f66 <_exit>:
 f66:	f8 94       	cli

00000f68 <__stop_program>:
 f68:	ff cf       	rjmp	.-2      	; 0xf68 <__stop_program>
